<?php

namespace App\Exceptions;

use App\Enums\ErrorDefine;
use App\Enums\LogType;
use App\Exceptions\Custom\OTPBaseException;
use Exception;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use League\OAuth2\Server\Exception\OAuthServerException;
use Log;
use ReturnData;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Throwable;

class Handler extends ExceptionHandler
{
  /**
   * A list of exception types with their corresponding custom log levels.
   *
   * @var array<class-string<\Throwable>, \Psr\Log\LogLevel::*>
   */
  protected $levels = [
    //
  ];

  /**
   * A list of the exception types that are not reported.
   *
   * @var array<int, class-string<\Throwable>>
   */
  protected $dontReport = [
    OAuthServerException::class,
  ];

  /**
   * A list of the inputs that are never flashed to the session on validation exceptions.
   *
   * @var array<int, string>
   */
  protected $dontFlash = [
    'current_password',
    'password',
    'password_confirmation',
  ];

  protected function makeParserErrorReport(Throwable $e)
  {
    $newTrace = !empty($e->getTrace()) ? $e->getTrace()[0] : [];
    unset($newTrace['args']);

    Log::channel('parsererror')->error(
      '',
      [
        'log_type' => LogType::PARSER,
        'code' => str_pad($e->getCode(), config('constant.ERROR_CODE_LENGTH'), 0),
        'message' => $e->getMessage(),
        'file' => $e->getFile(),
        'line' => $e->getLine(),
        'traceback' => $newTrace,
        'ctx' => $e->ctx ?? [],
        'ctx_p' => $e->ctxP ?? [],
      ],
    );
  }


  /**
   * Register the exception handling callbacks for the application.
   *
   * @return void
   */
  public function register()
  {
    $this->reportable(function (OTPBaseException $e) {
      $this->makeParserErrorReport($e);
      // logger('check error log!!!');
      return false; // report 여기까지
      // return true; // report 계속 여부 (다음 reportable 없으면 기본 로그 출력)
    });

    // $this->reportable(function (Throwable $e) {
    //   logger($e->getCode());
    //   logger($e->getMessage());
    //   $this->makeParserErrorReport($e);
    //   logger('check error log!!!');
    //   return false;
    // });

    $this->renderable(function (Exception $e, $request) {
      if ($e instanceof NotFoundHttpException) {
        return ReturnData::setError([
          ErrorDefine::NOT_FOUND_API,
          __('common.not_found_api')
        ])->send(Response::HTTP_NOT_FOUND);
      } else if ($e instanceof MethodNotAllowedHttpException) {
        return ReturnData::setError([
          ErrorDefine::INTERNAL_SERVER_ERROR,
          $e->getMessage()
        ])->send(Response::HTTP_NOT_FOUND);
      }
    });
  }

  public function report(Throwable $e)
  {
    if ($e instanceof \League\OAuth2\Server\Exception\OAuthServerException && $e->getCode() == 9) {
      return;
    }
    parent::report($e); // TODO: Change the autogenerated stub
  }

  /**
   * Get the exception's context information.
   *
   * @return array
   */
  public function context()
  {
    return
      array_merge(parent::context(), [
        'extra' => '',
      ]);
  }
}
